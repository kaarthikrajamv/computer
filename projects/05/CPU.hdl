CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=notinstruction);//
    Not(out=one);//

    And(a=instruction[15] , b=instruction[4], out=loadD);//
    DRegister(in=hackout, load=loadD, out=outD);//

    Mux16(a=instruction, b=hackout, sel=instruction[15], out=inA);// 
    Or(a=notinstruction, b=instruction[5], out=loadA);
    ARegister(in=inA, load=loadA, out=outA);

    Mux16(a=outA, b=inM, sel=instruction[12], out=valueAorM);

    ALU(x=outD, y=valueAorM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=hackout, zr=iszero, ng=sign);


    Not(in=instruction[0],out=not0);
    Not(in=instruction[1],out=not1);
    Not(in=instruction[2],out=not2);
    Not(in=iszero,out=notzero);
    Not(in=sign,out=nonnegative);
    Or(a=iszero,b=sign,out=nonpositive);

    And5(I1=not2,I2=not1,I3=instruction[0],a=notzero,b=nonnegative,out=out2);//JGT
    And5(I1=not2,I2=instruction[1],I3=not0,a=iszero,b=one,out=out3);//Equal
    And5(I1=not2,I2=instruction[1],I3=instruction[0],a=one,b=nonnegative,out=out4);//JGE
    And5(I1=instruction[2],I2=not1,I3=not0,a=notzero,b=sign,out=out5);//JLT
    And5(I1=instruction[2],I2=not1,I3=instruction[0],a=notzero,b=one,out=out6);//JNE
    And5(I1=instruction[2],I2=instruction[1],I3=not0,a=nonpositive,b=one,out=out7);//JLE
    And5(I1=instruction[2],I2=instruction[1],I3=instruction[0],a=one,b=one,out=out8);//JMP

    Or8Way(in[2]=out2,in[3]=out3,in[4]=out4,in[5]=out5,in[6]=out6,in[7]=out7,in[1]=out8,out=jump);
    And(a=jump,b=instruction[15],out=jumppc);

    And(a=instruction[15], b=instruction[3], out=writeM);
	And16(a=outA,b=outA,out[0..14]=addressM);
	And16(a=hackout,b=hackout,out=outM);
    
	PC(in=outA, reset=reset, load=jumppc, inc=one, out[0..14]=pc);

}

